'use client'

import React, { useState, useEffect } from 'react'
import { useAuth } from '@/contexts/AuthContext'
import { supabase } from '@/lib/supabase'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Calendar, MapPin, Users, DollarSign, Cloud, Star, MessageSquare, AlertTriangle, Package, Lightbulb, MessageCircle, Handshake, FileText } from 'lucide-react'
import { toast } from 'sonner'
import { useTranslations } from 'next-intl'

interface TourReportFormProps {
  tourId: string
  onSuccess?: () => void
  onCancel?: () => void
  locale?: string
}

interface TourReportData {
  end_mileage: number | null
  cash_balance: number | null
  customer_count: number | null
  weather: string | null
  main_stops_visited: string[]
  activities_completed: string[]
  overall_mood: string | null
  guest_comments: string | null
  incidents_delays_health: string[]
  lost_items_damage: string[]
  suggestions_followup: string | null
  communication: string | null
  teamwork: string | null
  comments: string | null
  sign: string | null
  office_note: string | null
}

const WEATHER_OPTIONS = [
  { value: 'sunny', icon: '‚òÄÔ∏è' },
  { value: 'cloudy', icon: '‚òÅÔ∏è' },
  { value: 'rainy', icon: 'üåßÔ∏è' },
  { value: 'snowy', icon: '‚ùÑÔ∏è' },
  { value: 'windy', icon: 'üí®' },
  { value: 'foggy', icon: 'üå´Ô∏è' }
]

const MOOD_OPTIONS = [
  { value: 'excellent', icon: 'üòä', ko: 'Í∞ÄÏû• Ï¢ãÏùå', en: 'Excellent' },
  { value: 'good', icon: 'üôÇ', ko: 'Ï†ÑÎ∞òÏ†Å ÎßåÏ°±', en: 'Good' },
  { value: 'average', icon: 'üòê', ko: 'Î≥¥ÌÜµ', en: 'Average' },
  { value: 'poor', icon: 'üòû', ko: 'Îß§Ïö∞ Î∂àÎßå', en: 'Poor' },
  { value: 'terrible', icon: 'üò¢', ko: 'Í∞ÄÏù¥Îìú Î∂àÎßå', en: 'Terrible' }
]

const RATING_OPTIONS = [
  { value: 'excellent', icon: '‚≠ê‚≠ê‚≠ê', ko: 'Ïö∞Ïàò', en: 'Excellent' },
  { value: 'good', icon: '‚≠ê‚≠ê', ko: 'Ï¢ãÏùå', en: 'Good' },
  { value: 'average', icon: '‚≠ê', ko: 'Î≥¥ÌÜµ', en: 'Average' },
  { value: 'poor', icon: 'üëé', ko: 'ÎÇòÏÅ®', en: 'Poor' }
]

const MAIN_STOPS_OPTIONS = [
  { ko: 'Í∑∏ÎûúÎìú Ï∫êÎãàÏñ∏', en: 'Grand Canyon' },
  { ko: 'Ïï§ÌÖîÎ°úÌîÑ Ï∫êÎãàÏñ∏', en: 'Antelope Canyon' },
  { ko: 'Î∏åÎùºÏù¥Ïä§ Ï∫êÎãàÏñ∏', en: 'Bryce Canyon' },
  { ko: 'ÏûêÏù¥Ïò® Íµ≠Î¶ΩÍ≥µÏõê', en: 'Zion National Park' },
  { ko: 'Î™®Îâ¥Î®ºÌä∏ Î∞∏Î¶¨', en: 'Monument Valley' },
  { ko: 'ÏïÑÏπòÏä§ Íµ≠Î¶ΩÍ≥µÏõê', en: 'Arches National Park' },
  { ko: 'Ï∫êÌîºÌÜ® Î¶¨ÌîÑ', en: 'Capitol Reef' },
  { ko: 'ÏΩîÎûÑ ÌïëÌÅ¨ ÏÉåÎìÑÏä§', en: 'Coral Pink Sand Dunes' },
  { ko: 'Ìò∏Ïä§Ïäà Î≤§Îìú', en: 'Horseshoe Bend' },
  { ko: 'Í∏ÄÎ†å Ï∫êÎãàÏñ∏', en: 'Glen Canyon' },
  { ko: 'ÌéòÏù¥ÏßÄ', en: 'Page' },
  { ko: 'ÎùºÏä§Î≤†Í∞ÄÏä§', en: 'Las Vegas' },
  { ko: 'Î°úÏä§Ïï§Ï†§Î†àÏä§', en: 'Los Angeles' }
]

const ACTIVITIES_OPTIONS = [
  { ko: 'ÌïòÏù¥ÌÇπ', en: 'Hiking' },
  { ko: 'ÏÇ¨ÏßÑ Ï¥¨ÏòÅ', en: 'Photography' },
  { ko: 'Í¥ÄÍ¥ë', en: 'Sightseeing' },
  { ko: 'ÏãùÏÇ¨', en: 'Dining' },
  { ko: 'ÏáºÌïë', en: 'Shopping' },
  { ko: 'ÏÑ†ÏÖã Í¥ÄÎûå', en: 'Sunset Viewing' },
  { ko: 'ÏÑ†ÎùºÏù¥Ï¶à Í¥ÄÎûå', en: 'Sunrise Viewing' },
  { ko: 'Ìó¨Î¶¨ÏΩ•ÌÑ∞ Ìà¨Ïñ¥', en: 'Helicopter Tour' },
  { ko: 'Î≥¥Ìä∏ Ìà¨Ïñ¥', en: 'Boat Tour' },
  { ko: 'Î≤ÑÏä§ Ìà¨Ïñ¥', en: 'Bus Tour' },
  { ko: 'Í±∑Í∏∞ Ìà¨Ïñ¥', en: 'Walking Tour' },
  { ko: 'ÏûêÏ†ÑÍ±∞ Ìà¨Ïñ¥', en: 'Bike Tour' },
  { ko: 'Ï∫†Ìïë', en: 'Camping' },
  { ko: 'ÌîºÌÅ¨Îãâ', en: 'Picnic' }
]

const INCIDENTS_OPTIONS = [
  { ko: 'ÍµêÌÜµ ÏßÄÏó∞', en: 'Traffic Delay' },
  { ko: 'ÎÇ†Ïî® Î¨∏Ï†ú', en: 'Weather Issue' },
  { ko: 'Ï∞®Îüâ Í≥†Ïû•', en: 'Vehicle Breakdown' },
  { ko: 'Í±¥Í∞ï Î¨∏Ï†ú', en: 'Health Issue' },
  { ko: 'ÏÇ¨Í≥†', en: 'Accident' },
  { ko: 'ÏòàÏïΩ Ïò§Î•ò', en: 'Booking Error' },
  { ko: 'Í∞ÄÏù¥Îìú ÏßÄÏó∞', en: 'Guide Delay' },
  { ko: 'Í≥†Í∞ù Î∂àÎßå', en: 'Customer Complaint' },
  { ko: 'Í∏∞ÌÉÄ', en: 'Other' }
]

const LOST_DAMAGE_OPTIONS = [
  { ko: 'Î∂ÑÏã§Î¨º ÏóÜÏùå', en: 'No Lost Items' },
  { ko: 'Í∞ÄÎ∞© Î∂ÑÏã§', en: 'Bag Lost' },
  { ko: 'Ìú¥ÎåÄÌè∞ Î∂ÑÏã§', en: 'Phone Lost' },
  { ko: 'Ïπ¥Î©îÎùº Î∂ÑÏã§', en: 'Camera Lost' },
  { ko: 'Ï∞®Îüâ ÏÜêÏÉÅ', en: 'Vehicle Damage' },
  { ko: 'ÏãúÏÑ§ ÏÜêÏÉÅ', en: 'Facility Damage' },
  { ko: 'Í∏∞ÌÉÄ ÏÜêÏÉÅ', en: 'Other Damage' }
]

export default function TourReportForm({ tourId, onSuccess, onCancel, locale = 'ko' }: TourReportFormProps) {
  const t = useTranslations('tourReportForm')
  const { user } = useAuth()
  
  // Î≤àÏó≠ Ìï®Ïàò
  const getText = (ko: string, en: string) => locale === 'en' ? en : ko
  const [loading, setLoading] = useState(false)
  const [formData, setFormData] = useState<TourReportData>({
    end_mileage: null,
    cash_balance: null,
    customer_count: null,
    weather: null,
    main_stops_visited: [],
    activities_completed: [],
    overall_mood: null,
    guest_comments: '',
    incidents_delays_health: [],
    lost_items_damage: [],
    suggestions_followup: '',
    communication: null,
    teamwork: null,
    comments: '',
    sign: '',
    office_note: ''
  })

  const handleInputChange = (field: keyof TourReportData, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleArrayChange = (field: keyof TourReportData, value: string, checked: boolean) => {
    setFormData(prev => {
      const currentArray = prev[field] as string[]
      if (checked) {
        return {
          ...prev,
          [field]: [...currentArray, value]
        }
      } else {
        return {
          ...prev,
          [field]: currentArray.filter(item => item !== value)
        }
      }
    })
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!user?.email) {
      toast.error('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.')
      return
    }

    setLoading(true)
    try {
      const { error } = await supabase
        .from('tour_reports')
        .insert({
          tour_id: tourId,
          user_email: user.email,
          ...formData
        })

      if (error) throw error

      toast.success(t('reportSubmitted'))
      onSuccess?.()
    } catch (error) {
      console.error('Error submitting tour report:', error)
      toast.error(t('submitError'))
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="max-w-4xl mx-auto p-2 md:p-4 space-y-4 md:space-y-6">
      <Card>
        <CardHeader className="p-4 md:p-6">
          <CardTitle className="flex items-center gap-2 text-lg md:text-xl">
            <FileText className="w-5 h-5" />
            {t('title')}
          </CardTitle>
        </CardHeader>
        <CardContent className="p-4 md:p-6">
          <form onSubmit={handleSubmit} className="space-y-4 md:space-y-6">
            {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <Label htmlFor="end_mileage" className="flex items-center gap-2">
                  <MapPin className="w-4 h-4" />
                  {t('fields.endMileage')}
                </Label>
                <Input
                  id="end_mileage"
                  type="number"
                  value={formData.end_mileage || ''}
                  onChange={(e) => handleInputChange('end_mileage', parseInt(e.target.value) || null)}
                  placeholder={t('placeholders.endMileage')}
                />
              </div>
              <div>
                <Label htmlFor="cash_balance" className="flex items-center gap-2">
                  <DollarSign className="w-4 h-4" />
                  {t('fields.cashBalance')}
                </Label>
                <Input
                  id="cash_balance"
                  type="number"
                  step="0.01"
                  value={formData.cash_balance || ''}
                  onChange={(e) => handleInputChange('cash_balance', parseFloat(e.target.value) || null)}
                  placeholder={t('placeholders.cashBalance')}
                />
              </div>
              <div>
                <Label htmlFor="customer_count" className="flex items-center gap-2">
                  <Users className="w-4 h-4" />
                  {t('fields.customerCount')}
                </Label>
                <Input
                  id="customer_count"
                  type="number"
                  value={formData.customer_count || ''}
                  onChange={(e) => handleInputChange('customer_count', parseInt(e.target.value) || null)}
                  placeholder={t('placeholders.customerCount')}
                />
              </div>
            </div>

            {/* ÎÇ†Ïî® */}
            <div>
              <Label className="flex items-center gap-2 mb-3">
                <Cloud className="w-4 h-4" />
                {t('fields.weather')}
              </Label>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-2">
                {WEATHER_OPTIONS.map((option) => (
                  <Button
                    key={option.value}
                    type="button"
                    variant={formData.weather === option.value ? "default" : "outline"}
                    size="sm"
                    onClick={() => handleInputChange('weather', option.value)}
                    className="flex items-center gap-1 text-xs md:text-sm"
                  >
                    <span className="text-base">{option.icon}</span>
                    <span className="truncate">{t(`weather.${option.value}`)}</span>
                  </Button>
                ))}
              </div>
            </div>

            {/* Ï£ºÏöî Ï†ïÎ•òÏû• Î∞©Î¨∏ */}
            <div>
              <Label className="flex items-center gap-2 mb-3">
                <MapPin className="w-4 h-4" />
                {t('fields.mainStopsVisited')}
              </Label>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                {MAIN_STOPS_OPTIONS.map((stop) => (
                  <Button
                    key={stop.ko}
                    type="button"
                    variant={formData.main_stops_visited.includes(stop.ko) ? "default" : "outline"}
                    size="sm"
                    onClick={() => handleArrayChange('main_stops_visited', stop.ko, !formData.main_stops_visited.includes(stop.ko))}
                    className="flex items-center gap-2 text-xs md:text-sm justify-start"
                  >
                    <span className={`w-4 h-4 rounded border-2 flex items-center justify-center ${
                      formData.main_stops_visited.includes(stop.ko) 
                        ? 'bg-blue-600 border-blue-600' 
                        : 'border-gray-300'
                    }`}>
                      {formData.main_stops_visited.includes(stop.ko) && (
                        <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                      )}
                    </span>
                    <span className="truncate">{locale === 'en' ? stop.en : stop.ko}</span>
                  </Button>
                ))}
              </div>
              {formData.main_stops_visited.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-1">
                  {formData.main_stops_visited.map((stop) => (
                    <Badge key={stop} variant="secondary">
                      {stop}
                    </Badge>
                  ))}
                </div>
              )}
            </div>

            {/* ÏôÑÎ£åÎêú ÌôúÎèô */}
            <div>
              <Label className="flex items-center gap-2 mb-3">
                <Package className="w-4 h-4" />
                {t('fields.activitiesCompleted')}
              </Label>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                {ACTIVITIES_OPTIONS.map((activity) => (
                  <Button
                    key={activity.ko}
                    type="button"
                    variant={formData.activities_completed.includes(activity.ko) ? "default" : "outline"}
                    size="sm"
                    onClick={() => handleArrayChange('activities_completed', activity.ko, !formData.activities_completed.includes(activity.ko))}
                    className="flex items-center gap-2 text-xs md:text-sm justify-start"
                  >
                    <span className={`w-4 h-4 rounded border-2 flex items-center justify-center ${
                      formData.activities_completed.includes(activity.ko) 
                        ? 'bg-blue-600 border-blue-600' 
                        : 'border-gray-300'
                    }`}>
                      {formData.activities_completed.includes(activity.ko) && (
                        <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                      )}
                    </span>
                    <span className="truncate">{locale === 'en' ? activity.en : activity.ko}</span>
                  </Button>
                ))}
              </div>
              {formData.activities_completed.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-1">
                  {formData.activities_completed.map((activity) => (
                    <Badge key={activity} variant="secondary">
                      {activity}
                    </Badge>
                  ))}
                </div>
              )}
            </div>

            {/* Ï†ÑÏ≤¥Ï†ÅÏù∏ Î∂ÑÏúÑÍ∏∞ */}
            <div>
              <Label className="flex items-center gap-2 mb-3">
                <Star className="w-4 h-4" />
                {t('fields.overallMood')}
              </Label>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-2">
                {MOOD_OPTIONS.map((option) => (
                  <Button
                    key={option.value}
                    type="button"
                    variant={formData.overall_mood === option.value ? "default" : "outline"}
                    size="sm"
                    onClick={() => handleInputChange('overall_mood', option.value)}
                    className="flex items-center gap-1 text-xs md:text-sm"
                  >
                    <span className="text-base">{option.icon}</span>
                    <span className="truncate">{t(`mood.${option.value}`)}</span>
                  </Button>
                ))}
              </div>
            </div>

            {/* Í≥†Í∞ù ÏΩîÎ©òÌä∏ */}
            <div>
              <Label htmlFor="guest_comments" className="flex items-center gap-2">
                <MessageSquare className="w-4 h-4" />
                {t('fields.guestComments')}
              </Label>
              <Textarea
                id="guest_comments"
                value={formData.guest_comments || ''}
                onChange={(e) => handleInputChange('guest_comments', e.target.value)}
                placeholder={t('placeholders.guestComments')}
                rows={3}
              />
            </div>

            {/* ÏÇ¨Í≥†/ÏßÄÏó∞/Í±¥Í∞ï Î¨∏Ï†ú */}
            <div>
              <Label className="flex items-center gap-2 mb-3">
                <AlertTriangle className="w-4 h-4" />
                {t('fields.incidentsDelaysHealth')}
              </Label>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                {INCIDENTS_OPTIONS.map((incident) => (
                  <Button
                    key={incident.ko}
                    type="button"
                    variant={formData.incidents_delays_health.includes(incident.ko) ? "destructive" : "outline"}
                    size="sm"
                    onClick={() => handleArrayChange('incidents_delays_health', incident.ko, !formData.incidents_delays_health.includes(incident.ko))}
                    className="flex items-center gap-2 text-xs md:text-sm justify-start"
                  >
                    <span className={`w-4 h-4 rounded border-2 flex items-center justify-center ${
                      formData.incidents_delays_health.includes(incident.ko) 
                        ? 'bg-red-600 border-red-600' 
                        : 'border-gray-300'
                    }`}>
                      {formData.incidents_delays_health.includes(incident.ko) && (
                        <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                      )}
                    </span>
                    <span className="truncate">{locale === 'en' ? incident.en : incident.ko}</span>
                  </Button>
                ))}
              </div>
              {formData.incidents_delays_health.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-1">
                  {formData.incidents_delays_health.map((incident) => (
                    <Badge key={incident} variant="destructive">
                      {incident}
                    </Badge>
                  ))}
                </div>
              )}
            </div>

            {/* Î∂ÑÏã§Î¨º/ÏÜêÏÉÅ */}
            <div>
              <Label className="flex items-center gap-2 mb-3">
                <Package className="w-4 h-4" />
                {t('fields.lostItemsDamage')}
              </Label>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                {LOST_DAMAGE_OPTIONS.map((item) => (
                  <Button
                    key={item.ko}
                    type="button"
                    variant={formData.lost_items_damage.includes(item.ko) ? "destructive" : "outline"}
                    size="sm"
                    onClick={() => handleArrayChange('lost_items_damage', item.ko, !formData.lost_items_damage.includes(item.ko))}
                    className="flex items-center gap-2 text-xs md:text-sm justify-start"
                  >
                    <span className={`w-4 h-4 rounded border-2 flex items-center justify-center ${
                      formData.lost_items_damage.includes(item.ko) 
                        ? 'bg-red-600 border-red-600' 
                        : 'border-gray-300'
                    }`}>
                      {formData.lost_items_damage.includes(item.ko) && (
                        <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                      )}
                    </span>
                    <span className="truncate">{locale === 'en' ? item.en : item.ko}</span>
                  </Button>
                ))}
              </div>
              {formData.lost_items_damage.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-1">
                  {formData.lost_items_damage.map((item) => (
                    <Badge key={item} variant="outline">
                      {item}
                    </Badge>
                  ))}
                </div>
              )}
            </div>

            {/* Ï†úÏïàÏÇ¨Ìï≠ ÎòêÎäî ÌõÑÏÜç Ï°∞Ïπò */}
            <div>
              <Label htmlFor="suggestions_followup" className="flex items-center gap-2">
                <Lightbulb className="w-4 h-4" />
                {t('fields.suggestionsFollowup')}
              </Label>
              <Textarea
                id="suggestions_followup"
                value={formData.suggestions_followup || ''}
                onChange={(e) => handleInputChange('suggestions_followup', e.target.value)}
                placeholder={t('placeholders.suggestionsFollowup')}
                rows={3}
              />
            </div>

            {/* Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò */}
            <div>
              <Label className="flex items-center gap-2 mb-3">
                <MessageCircle className="w-4 h-4" />
                {t('fields.communication')}
              </Label>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                {RATING_OPTIONS.map((option) => (
                  <Button
                    key={option.value}
                    type="button"
                    variant={formData.communication === option.value ? "default" : "outline"}
                    size="sm"
                    onClick={() => handleInputChange('communication', option.value)}
                    className="flex items-center gap-1 text-xs md:text-sm"
                  >
                    <span className="text-base">{option.icon}</span>
                    <span className="truncate">{t(`rating.${option.value}`)}</span>
                  </Button>
                ))}
              </div>
            </div>

            {/* ÌåÄÏõåÌÅ¨ */}
            <div>
              <Label className="flex items-center gap-2 mb-3">
                <Handshake className="w-4 h-4" />
                {t('fields.teamwork')}
              </Label>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                {RATING_OPTIONS.map((option) => (
                  <Button
                    key={option.value}
                    type="button"
                    variant={formData.teamwork === option.value ? "default" : "outline"}
                    size="sm"
                    onClick={() => handleInputChange('teamwork', option.value)}
                    className="flex items-center gap-1 text-xs md:text-sm"
                  >
                    <span className="text-base">{option.icon}</span>
                    <span className="truncate">{t(`rating.${option.value}`)}</span>
                  </Button>
                ))}
              </div>
            </div>

            {/* Í∏∞ÌÉÄ ÏΩîÎ©òÌä∏ */}
            <div>
              <Label htmlFor="comments" className="flex items-center gap-2">
                <MessageSquare className="w-4 h-4" />
                {t('fields.comments')}
              </Label>
              <Textarea
                id="comments"
                value={formData.comments || ''}
                onChange={(e) => handleInputChange('comments', e.target.value)}
                placeholder={t('placeholders.comments')}
                rows={3}
              />
            </div>

            {/* ÏÑúÎ™Ö */}
            <div>
              <Label htmlFor="sign" className="flex items-center gap-2">
                <FileText className="w-4 h-4" />
                {t('fields.sign')}
              </Label>
              <Input
                id="sign"
                value={formData.sign || ''}
                onChange={(e) => handleInputChange('sign', e.target.value)}
                placeholder={t('placeholders.sign')}
              />
            </div>

            {/* ÏÇ¨Î¨¥Ïã§ Î©îÎ™® */}
            <div>
              <Label htmlFor="office_note" className="flex items-center gap-2">
                <FileText className="w-4 h-4" />
                {t('fields.officeNote')}
              </Label>
              <Textarea
                id="office_note"
                value={formData.office_note || ''}
                onChange={(e) => handleInputChange('office_note', e.target.value)}
                placeholder={t('placeholders.officeNote')}
                rows={2}
              />
            </div>

            {/* Ï†úÏ∂ú Î≤ÑÌäº */}
            <div className="flex flex-col sm:flex-row gap-3 pt-4">
              <Button
                type="submit"
                disabled={loading}
                className="flex-1 h-12 text-base font-medium"
              >
                {loading ? t('submitting') : t('submitReport')}
              </Button>
              {onCancel && (
                <Button
                  type="button"
                  variant="outline"
                  onClick={onCancel}
                  className="flex-1 sm:flex-none h-12 text-base"
                >
                  {t('cancel')}
                </Button>
              )}
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}
